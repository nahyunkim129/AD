package pcalculation;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.stat.correlation.PearsonsCorrelation;

import com.opencsv.CSVReader;



public class DataPrep {
	DataPrep(){
		
	}
	
	void printDoubleArr(double[][] arr,String type){
		int size = arr.length;
		System.out.println("\n" + size + "x" + size + " "+type+" Matrix : ");
		for (double[] eachDouble : arr) {
			for (int i = 0; i < eachDouble.length; i++) {
				System.out.print(eachDouble[i] + " ");
				if (i == eachDouble.length - 1)
					System.out.println();
			}
		}
	}

	double[][] load(String filename) {
		CSVReader reader;
		try {
			reader = new CSVReader(new FileReader(filename));
			String[] row;
			String[] patient = reader.readNext();
			int numPatient = patient.length-1;
			int numGene=0;
			
			ArrayList<double[]> geneList = new ArrayList<double[]>();
			
			System.out.println("	Reading "+numPatient+" patient ID");			
			for (int i = 1; i < patient.length; i++) {											
				//System.out.print(patient[i]+" ");				
			}
			System.out.println("	Finished reading patient ID");
			while ((row = reader.readNext()) != null) {
				double[] geneData = new double[numPatient];
				//System.out.print(row[0]+" : ");
				for (int i = 1; i < row.length; i++) {										
					geneData[i-1]= Double.parseDouble(row[i]);
					//System.out.print(geneData[i-1]+" ");
				}
				//System.out.println();
				numGene++;
				geneList.add(geneData);				
			}
			System.out.println("	Finished reading "+numGene+" gene data");
			
			double[][] finalGene = new double[numGene][numPatient];			
			for(double[] eachGene : geneList){
				for(int j=0; j<numPatient; j++){					
					//finalGene[i][j]=eachGene[j];
					//System.out.print(eachGene[j]+" ");
				}
				//System.out.println();
			}
			//System.out.println("	Finished reading arraylist");

			for (int i = 0; i < geneList.size(); i++) {
				double[] eachGene = geneList.get(i);				
				for (int j = 0; j < numPatient; j++) {				
					finalGene[i][j] = eachGene[j];				
				}				
			}
						
			double[][] finalGeneSwitched = new double[numPatient][numGene];
			for(int i=0; i<numPatient; i++){
				for(int j=0; j<numGene; j++){
					finalGeneSwitched[i][j]=finalGene[j][i];
				}
			}
/*
			for(double[] eachGene : finalGene){
				for(int i=0; i<eachGene.length; i++){					
					System.out.print(eachGene[i]+" ");
					if(i==eachGene.length-1)
						System.out.println();						
				}
			}
			
			for(double[] eachGene : finalGeneSwitched){
				for(int i=0; i<eachGene.length; i++){					
					System.out.print(eachGene[i]+" ");
					if(i==eachGene.length-1)
						System.out.println();						
				}
			}
*/
			reader.close();
			return finalGeneSwitched;
									
		} catch (FileNotFoundException e) {
			System.err.println(e.getMessage());
		} catch (IOException e) {
			System.err.println(e.getMessage());
		}
		return null;
	}
	
	/*
	public static void main(String[] args) {
				
		DataPrep load = new DataPrep();				
		String alzADFile = "C:/NaHyun/Research/AD/Data/mmsePats_ADGenes.csv";
		String alzRandomFile = "C:/NaHyun/Research/AD/Data/mmsePats_allGenes.csv";

		System.out.println("Loading AD data...");
		double[][] alzData = load.load(alzADFile);
		PearsonsCorrelation alzPearsonPC = new PearsonsCorrelation(alzData);
		RealMatrix alzPearsonRM = alzPearsonPC.computeCorrelationMatrix(alzData);
		double[][] alzPearson = alzPearsonRM.getData();
		int alzSize = alzPearson.length;
		System.out.println("\n"+alzSize+"x"+alzSize+" Pearson Correlation Matrix : ");
		for(double[] eachGene : alzPearson){
			for(int i=0; i<eachGene.length; i++){					
				System.out.print(eachGene[i]+" ");
				if(i==eachGene.length-1)
					System.out.println();						
			}
		}		
	}
	*/

}
